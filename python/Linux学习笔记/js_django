1、JS 正则


	test   - 判断字符串是否符合规定的正则
		rep = /\d+/;
		rep.test("asdfoiklfasdf89asdfasdf")
		# true
		
		rep = /^\d+$/;
		rep.test("asdfoiklfasdf89asdfasdf")
		# true
		
	exec   - 获取匹配的数据
		rep = /\d+/;
		str = "wangshen_67_houyafa_20"
		rep.exec(str)
		# ["67"]
		
		JavaScript is more fun than Java or JavaBeans!
		var pattern = /\bJava(\w*)\b/;
		# ["JavaScript", "Script"]
		
		
		JavaScript is more fun than Java or JavaBeans!
		var pattern = /\bJava\w*\b/g;
		# ["JavaScript"]
		# ["Java"]
		# ["JavaBeans"]
		# null
		
		JavaScript is more fun than Java or JavaBeans!
		var pattern = /\bJava(\w*)\b/g;
		# ["JavaScript",'Script']
		# ["Java", ""]
		# ["JavaBeans", "Beans"]
		# null
		
	多行匹配：
		默认就是多行匹配
		^$
   - 登录注册验证
		默认事件先执行：
			checkbox
		自定义先执行
			a
			submit
			...
		<form>
			
			<input type='type' />
			<input type='password' />
			<input type='submit' />
			
		</form>
   
		$(':submit').click(function(){
			
			$(':text,:password').each(function(){
				...
				return false;
			})
			return false;
		})   
   
		input,checbox
   
    ================================== 验证 ================================
	JS： 验证
		 
		 各种验证
		 
			$(':submit').click(function(){
				
				$(':text,:password').each(function(){
					...
					return false;
				})
				return false;
			})   
	
	
	后端：python实现
	
	业务处理
	....
	

2、组件


	BootStrap
		- css
		- js
	学习 BootStrap 规则  18.4  18.5
	
	一、响应式
		@media
		
	二、图标、字体
		@font-face
		
	三、基本使用
		轮播图 18.6
	
		
	
	========》 后台管理
	
	jQueryUI *
		- css
		- js
	学习 jQueryUI 规则
	
	
	EasyUI
		- css
		- js
		
	学习 jQueryUI 规则
	============ Ajax操作 ================
	
	
	
	
3、WEB框架

	MVC
		Model       View       Controller
		数据库   模板文件    业务处理
	
	
	MTV

		Model    Template     View
		数据库   模板文件    业务处理
	
	
	############## WEB：MVC、MTV
	
4、Django
	C:\Users\Administrator\AppData\Local\Programs\Python\Python35\Scripts
	D:\xshell\;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;D:\ad9\System;%CDSROOT%\tools\bin;%CDSROOT%\tools\libutil\bin;%CDSROOT%\tools\fet\bin;%CDSROOT%\tools\pcb\bin;%CDSROOT%\tools\PSpice;%CDSROOT%\tools\PSpice\Library;%CDSROOT%\tools\Capture;%CDSROOT%\tools\specctra\bin;%CDSROOT%\OpenAccess\bin\win32\opt;C:\Users\Administrator\AppData\Local\Programs\Python\Python35\Scripts
	
	pip3 install django
	
	
	C:\Python35\Scripts
	
	# 创建Django工程
	django-admin startproject 【工程名称】
	
		mysite
			- mysite        # 对整个程序进行配置
				- init
				- settings  # 配置文件
				- url       # URL对应关系
				- wsgi      # 遵循WSIG规范，uwsgi + nginx
			- manage.py     # 管理Django程序：
								- python manage.py 
								- python manage.py startapp xx
								- python manage.py makemigrations
								- python manage.py migrate
		
		
		
	# 运行Django功能
	python manage.py runserver 127.0.0.1:8001
	
	
	chouti
		- chouti
			- 配置
		- 主站 app
		- 后台管理 app
	
	
	
	# 创建app
	python manage.py startapp cmdb
	python manage.py startapp openstack
	python manage.py startapp xxoo....
	
	
	app：
		migrations     数据修改表结构
		admin          Django为我们提供的后台管理
		apps           配置当前app
		models         ORM,写指定的类  通过命令可以创建数据库结构
		tests          单元测试
		views          业务代码
		templates   render
		csrf
	
	
	
	1、配置模板的路径
	
		TEMPLATES = [
				{
					'BACKEND': 'django.template.backends.django.DjangoTemplates',
					'DIRS': [os.path.join(BASE_DIR, 'templates')],
					'APP_DIRS': True,
					'OPTIONS': {
						'context_processors': [
							'django.template.context_processors.debug',
							'django.template.context_processors.request',
							'django.contrib.auth.context_processors.auth',
							'django.contrib.messages.context_processors.messages',
						],
					},
				},
			]
	2、配置静态目录
		static
	
		STATICFILES_DIRS = (
			os.path.join(BASE_DIR, 'static'),
		)

		
		<link rel="stylesheet" href="/static/commons.css" />
	

内容整理
	1. 创建Django工程
			django-admin startproject 工程名

	2. 创建APP
		cd 工程名
		python manage.py startapp cmdb

	3、静态文件
		project.settings.py
		
		STATICFILES_DIRS = (
			os.path.join(BASE_DIR, "static"),
		)
	
	4、模板路径
	
		DIRS ==>    [os.path.join(BASE_DIR,'templates'),]
		
	5、settings中
		
		middlerware
		
			# 注释 csrf
			
			
	6、定义路由规则
		url.py
		
			"login" --> 函数名
			
	7、定义视图函数
		app下views.py
			
			def func(request):
				# request.method   GET / POST
				
				# http://127.0.0.1:8009/home?nid=123&name=alex
				# request.GET.get('',None)   # 获取请求发来的而数据
				
				# request.POST.get('',None)
				
				
				# return HttpResponse("字符串")
				# return render(request, "HTML模板的路径")
				# return redirect('/只能填URL')
				
	8、模板渲染
		特殊的模板语言
		
			-- {{ 变量名 }}
		
				def func(request):
					return render(request, "index.html", {'current_user': "alex"})
		
					
				index.html
				
				<html>
				..
					<body>
						<div>{{current_user}}</div>
					</body>
				
				</html>
				
				====> 最后生成的字符串
				
				<html>
				..
					<body>
						<div>alex</div>
					</body>
				
				</html>
			-- For循环
				def func(request):
					return render(request, "index.html", {'current_user': "alex", 'user_list': ['alex','eric']})
		
					
				index.html
				
				<html>
				..
					<body>
						<div>{{current_user}}</div>
						
						<ul>
							{% for row in user_list %}
							
								{% if row == "alex" %}
									<li>{{ row }}</li>
								{% endif %}
								
							{% endfor %}
						</ul>
						
					</body>
				
				</html>
				
			#####索引################# 
				def func(request):
					return render(request, "index.html", {
								'current_user': "alex", 
								'user_list': ['alex','eric'], 
								'user_dict': {'k1': 'v1', 'k2': 'v2'}})
		
					 
				index.html
				
				<html>
				..
					<body>
						<div>{{current_user}}</div>
						
						<a> {{ user_list.1 }} </a>
						<a> {{ user_dict.k1 }} </a>
						<a> {{ user_dict.k2 }} </a>
						
					</body>
				
				</html>
			
			###### 条件
			
				def func(request):
					return render(request, "index.html", {
								'current_user': "alex", 
								"age": 18,
								'user_list': ['alex','eric'], 
								'user_dict': {'k1': 'v1', 'k2': 'v2'}})
		
					
				index.html
				
				<html>
				..
					<body>
						<div>{{current_user}}</div>
						
						<a> {{ user_list.1 }} </a>
						<a> {{ user_dict.k1 }} </a>
						<a> {{ user_dict.k2 }} </a>
						
						{% if age %}
							<a>有年龄</a>
							{% if age > 16 %}
								<a>老男人</a>
							{% else %}
								<a>小鲜肉</a>
							{% endif %}
						{% else %}
							<a>无年龄</a>
						{% endif %}
					</body>
				
				</html>
	
	
	
XXOO管理：
	MySQL
	SQLAlchemy
	主机管理（8列）：
		IP
		端口
		业务线
		...
		
	用户表：
		用户名
		密码
	
	功能：
		1、 登录
		2、主机管理页面
			- 查看所有的主机信息（4列）
			- 增加主机信息（8列） ** 模态对话框
		3、查看详细
			url:
				"detail" -> detail
		
			def detail(reqeust):
				nid = request.GET.get("nid")
				v = select * from tb where id = nid
				...
		4、删除
			del_host -> delete_host
			
			def delete_host(request):
				nid = request.POST.get('nid')
				delete from tb where id = nid
				return redirect('/home')
			
	

	一，路由系统，url
		django 请求生命周期
			1. 当用户在浏览器中输入url时,浏览器会生成请求头和请求体发给服务端
			请求头和请求体中会包含浏览器的动作(action),这个动作通常为get或者post,体现在url之中.

			2.url经过Django中的wsgi,再经过Django的中间件,最后url到过路由映射表,在路由中一条一条进行匹配,
			一旦其中一条匹配成功就执行对应的视图函数,后面的路由就不再继续匹配了.
			3. 视图函数根据客户端的请求查询相应的数据.返回给Django,然后Django把客户端想要的数据做为一个字符串返回给客户端.
			4. 客户端浏览器接收到返回的数据,经过渲染后显示给用户.
		1 url(r'^home', views.home),    url(r'^home', views.home.as_views()),
		2 url(r'^detial-(\d+).html', views.detail),
		3 url(r'^detial-(?p(nid)\d+)-(?p(uid)\d+).html', views.detail), 			   有多个参数时def(*args,**kwargs)
		实战：
			a
				url(r'^detial-(\d+)-(\d+).html', views.detail)
				def func(request,nid,uid):  顺序不能混
					pass
				def func(request,*args):  
					args = （2,9）
				def func(request,*args,*kwargs): 
					args = （2,9）
					
			b
				url(r'^detial-(?p(nid)\d+)-(?p(uid)\d+).html', views.detail)
				def func(request,nid,uid):  顺序可以乱
					pass
				def func(request,*kwargs):  
					kwargs = {'nid':1,'uid':2}
				def func(request,*args,*kwargs): 
					kwargs = {'nid':1,'uid':2}
		4 name  19,9
			对URL路由关系进行命名，以后可以根据此名称生成自己想要的url
			url(r'^wqwqwqwqwq/', views.index,name ='i1')  #####redirect(reverse("df_cart:cart"))
			url(r'^yug/(/d+)/(/d+)/', views.index,name ='i2')
			url(r'^buy/(?p<pid>/d+)/(?p<uid>/d+)/', views.index,name ='i2')
			
			def  func(request *args,**kwargs):
				from django.urls  import reverse
				
				url1 = reverse('i1')   					 		#wqwqwqwqwq/
				url1 = reverse('i1',args=(1,2,))    			#yug/1/2/
				url1 = reverse('i1',kwargs={'pid':1,'nid':9})   #buy/1/9
				
			xxx.html
				{% url “i1”%}   	 		#wqwqwqwqwq/
				{% url “i1” 1 2 %}   		#yug/1/2/
				{% url “i1” pid=1 nid=9 %}  #buy/1/9
		5 
			路由分发  19.10
			from django.conf.urls import include
			project/urls.py
				urlpatterns = {
					url(r'^app02/',include("app02/,urls") ),
				}
			app02/urls.py
				from django.contrib import admin
				from django.conf.urls import url,include
				from   app02  import   views
				urlpatterns = {
					url(r'^login', views.login),
				}
			
		6  默认值
		
		7	命名空间	
				
				
			模板语言：
				变量{{ arg}}
				逻辑使用{%%}
				{% url “indexx”%}
				{% url “indexx” 3%}
			ps  当前页面
			   request.path_info
	上传文件  19.4
	
	二 视图
	
		1， request.GET
			request.POST
			request.FILES（上传的文件）
			单选 
			request.POST.get()
			#checbox  多选
			request.POST.getlist()
		
		2.	#上传文件  form 要做特殊设置
			obj = request.FILES.get('filename')
			obj.name 
			f = open(obj.name,mode='wb')
			for  item in obj.chunks()  #  chunks迭代器、
				f.write(item)
			f.close()
		3  FBV  &  CBV
			function base view
				url.py
					index ->  函数名
				view.py
					def  函数（request）
					 。。。。。
			=======》
			/index/ ->  函数
			/index/ ->  class   19.5
		4  循环字典
			user_dict={'k1'：‘root1’,'k2'：‘root2’,'k3'：‘root3’,'k4'：‘root4’}
			{%for k,row in  user_dict%}
				<li>{{k}}-{{row}}</li>
				{%endfor%}
				7
			
	三  模板
	
	四   ORM操作    Django连接mysql   navicat
		select *  from    tb    where   id>1
		models.tb.objects.filter(id_gt=1)
		models.tb.objects.filter(id=1)
		models.tb.objects.filter(id_lt=1)
		
		a  创建类
			
			from  django.db  import models
			#表名  app01_userinfo
			class UserInfo(models.Model):
				#默认创建 id列 自增 主键
				class   UserInfo(models.Model):
					 username = models.CharField(max_length=32)
					 password = models.CharField(max_length=64)
		b	注册app setting 中加入你的app名字		 
				INSTALLED_APPS = [
				'django.contrib.admin',
				'django.contrib.auth',
				'django.contrib.contenttypes',
				'django.contrib.sessions',
				'django.contrib.messages',
				'django.contrib.staticfiles',
				app01，
	]
		c 执行命令
				python  manage.py    makemigrations  会在当前目录下生成一个migrations文件夹，该文件夹的内容就是数据库要执行的内容
				python  manage.py    migrate
				migrate就是执行之前生成的migrations文件，这一步才是操作数据库的一步 
		
			1 根据类自动创建数据库表
				#app下的model.py
			2 根据类对数据库变中的数据进行各种操作
		d  ***********注意*******
			Django默认使用MYSQLDB模块连接到mysql
			主动修改为pymysql：在project同名文件夹下的__init__文件中添加如下代码即可
			  import pymysql
			  pymysql.install_as_MySQLdb()
		
		
		5 增删改查  19.13
			增
			models.UserInfo.objects.create(username = 'root',password = '123')
			 dic = {'username': 'eric', 'password': '666'}
			# models.UserInfo.objects.create(**dic)

			# obj = models.UserInfo(username='alex',password='123')
			# obj.save()
			
			删
			# result = models.UserInfo.objects.all()
			result = models.UserInfo.objects.filter(username='root')
			for row in result:
				print(row.id,row.username,row.password)
			print(result)
			 # 删除
			# models.UserInfo.objects.filter(username="alex").delete()

			# 更新
			# models.UserInfo.objects.filter(id=3).update(password="69")
			
			  一对多   19.18.19.19 （重点）
			
		6 字段
		https://www.cnblogs.com/wupeiqi/articles/5246483.html
			字符串类型
			数字
			时间
			二进制
			自增
		字段的参数
		
			
		ORM 字符类型   字段类型19.17  
		
		
		Django在运行时：LookupError: No installed app with label 'admin'.
		https://blog.csdn.net/qq_42543264/article/details/89394517
	  15
	
	
	
	
	scrapy、
	
	
	
	
	
	
	
	
	
	
